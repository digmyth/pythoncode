from abc import ABCMeta,abstractmethod

class Foo(metaclass=ABCMeta):
    @abstractmethod
    def exec(self):
        pass

class C1(Foo):
    def exec(self):
        pass

    def f1(self):
        print("f1 ..")

obj1 = C1()
obj1.f1()

class Foo():
    def read(self):
        raise NotImplementedError("required read() method for subclass")

    def write(self):
        print("write...")

class Bar(Foo):
    def read(self):
        print(123)

obj = Bar()
obj.read()

# class interface Foo():
#     pass
