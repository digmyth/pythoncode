http://www.cnblogs.com/yuanchenqi/articles/7487059.html
Django_Form补充勾子函数验证

随机验证码：
http://www.cnblogs.com/yuanchenqi/articles/7468816.html
验证码基码参见random模块：http://www.digmyth.com/2017/02/20/python-05-02-模块

Django 认证系统
http://www.cnblogs.com/yuanchenqi/articles/7609586.html
from django.contrib import auth  #
user=auth.authenticate(usernamme=username,password=username)：

request.user.is_authenticated()   # 表明用户有session,能通过验证

利用Django自带的表创建用户，不能对Django自带的表直接操作，那怎么创建呢，Django提供一个接口，通过auth模块操作User表.
from django.contrib.auth.models import User
user = User.objects.create_user（username='',password='',email=''）
当Django自带User表字段不够用时，可以自己建表继承User表字段，方法:
from django.contrib.auth.models import  AbstractUser
class UserInfo(AbstractUser):
     detail = modoles.CharField(max_length=32)


$("#span").html(data)  # span标签赋值  <span id="span">spantest</span>
  
input框赋值 <p><input id="ret" type="text" name="xx"/></p>
$("#ret").val(data)

ajax error_msg

$("#login_error").html(error_msg).css("color","red");    # <>add XX</>  # 写入内容并变红

setTimeout(function (){
           $("#login_error").html("")                    # <>rm XX</>   # 清空内容
}，3000)  # 3秒钟后执行函数



onload="successBack();" # 一个标签内容有更新时重新加载
function successBack(){...};


form id='ff1'
<button onclck="change">提交</button>
function change(){
    document.getElementById('ff1').submit();
}

## s16_day20
Django后台学习
1 不建app的Django项目
2 命令行创建目录
python manage.py startapp backend  # 后台
python manage.py startapp web      # 前端
前后端共用一个数据库，那么models.py放在哪个文件夹里是个问题？
其实放在哪里都可以，但前后端不在同一个项目时，需单独放数据库python manage.py startapp repository做到程序解偶，
或者数据库完全就是单独Django项目，repository APP只提供数据库API即可。

Django Admin基本使用：
chouti示例models.py

models.Charfield(null=True,blank=True, unique=True)
null对数据库而言可以为空
blank对Django表单而言可以为空
unique对数据库而言表示唯一索引

class Meta:
unique_togather=(('user_info','news'),)  # 联合唯一索引

后台注册：
admin.py
from django.contrib import admin
from repository import  models

admin.site.register(models.UserInfo)     # 用户
admin.site.register(models.News)         # 新闻
admin.site.register(models.NewsType)     # 新闻类型
admin.site.register(models.Comment)      # 评论
admin.site.register(models.Favor)        # 点赞
创建超级用户：
python manage.py createsuperuser

class UserInfo(models.Model):
    nid = models.AutoField(primary_key=True)
    username = models.CharField(max_length=32, unique=True,verbose_name="用户名")  # 字段显示中文
    password = models.CharField(max_length=32)
    email = models.CharField(max_length=32, unique=True)
    ctime = models.DateTimeField()

    class Meta:
        verbose_name_plural="用户表"  # 表名显示中文
    def __str__(self):
        return self.username         # 每个对象显示
    






