https://code.ziqiangxuetang.com/django/django-qrcode.html  # python学习网站

http://www.cnblogs.com/wupeiqi/articles/6229292.html   # 线程、进程学习



http://www.cnblogs.com/yuanchenqi/articles/7487059.html
Django_Form补充勾子函数验证

http://www.cnblogs.com/wupeiqi/articles/5433893.html
http://www.cnblogs.com/wupeiqi/articles/5480868.html
http://www.cnblogs.com/wupeiqi/articles/4938499.html

随机验证码：
http://www.cnblogs.com/yuanchenqi/articles/7468816.html
验证码基码参见random模块：http://www.digmyth.com/2017/02/20/python-05-02-模块

Django 认证系统
http://www.cnblogs.com/yuanchenqi/articles/7609586.html
from django.contrib import auth  #
user=auth.authenticate(usernamme=username,password=username)：

request.user.is_authenticated()   # 表明用户有session,能通过验证

利用Django自带的表创建用户，不能对Django自带的表直接操作，那怎么创建呢，Django提供一个接口，通过auth模块操作User表.
from django.contrib.auth.models import User
user = User.objects.create_user（username='',password='',email=''）
当Django自带User表字段不够用时，可以自己建表继承User表字段，方法:
from django.contrib.auth.models import  AbstractUser
class UserInfo(AbstractUser):
     detail = modoles.CharField(max_length=32)


$("#span").html(data)  # span标签赋值  <span id="span">spantest</span>
  
input框赋值 <p><input id="ret" type="text" name="xx"/></p>
$("#ret").val(data)

ajax error_msg

$("#login_error").html(error_msg).css("color","red");    # <>add XX</>  # 写入内容并变红

setTimeout(function (){
           $("#login_error").html("")                    # <>rm XX</>   # 清空内容
}，3000)  # 3秒钟后执行函数



onload="successBack();" # 一个标签内容有更新时重新加载
function successBack(){...};


form id='ff1'
<button onclck="change">提交</button>
function change(){
    document.getElementById('ff1').submit();
}

## s16_day20
Django后台学习
1 不建app的Django项目
2 命令行创建目录
python manage.py startapp backend  # 后台
python manage.py startapp web      # 前端
前后端共用一个数据库，那么models.py放在哪个文件夹里是个问题？
其实放在哪里都可以，但前后端不在同一个项目时，需单独放数据库python manage.py startapp repository做到程序解偶，
或者数据库完全就是单独Django项目，repository APP只提供数据库API即可。

Django Admin基本使用：
chouti示例models.py

models.Charfield(null=True,blank=True, unique=True)
null对数据库而言可以为空
blank对Django表单而言可以为空
unique对数据库而言表示唯一索引

class Meta:
unique_togather=(('user_info','news'),)  # 联合唯一索引

后台注册：
admin.py
from django.contrib import admin
from repository import  models

admin.site.register(models.UserInfo)     # 用户
admin.site.register(models.News)         # 新闻
admin.site.register(models.NewsType)     # 新闻类型
admin.site.register(models.Comment)      # 评论
admin.site.register(models.Favor)        # 点赞
创建超级用户：
python manage.py createsuperuser

class UserInfo(models.Model):
    nid = models.AutoField(primary_key=True)
    username = models.CharField(max_length=32, unique=True,verbose_name="用户名")  # 字段显示中文
    password = models.CharField(max_length=32)
    email = models.CharField(max_length=32, unique=True)
    ctime = models.DateTimeField()

    class Meta:
        verbose_name_plural="用户表"  # 表名显示中文
    def __str__(self):
        return self.username         # 每个对象显示
    

点击onclick="doFavor({{ row.nid  }});"
function doFavor(nid){
     $.ajax({
     url:'/do_Favor',
     type:
     data:{"nid":nid}
     success:function(data){
          console.log(data)
     }
     })
}


<img class="valid_img" src="/get_valid_img/" alt="" width="200" height="40" onclick="changeImg(this);">
方法一：

function changeImg(ths){
ths.src+="?"
}
方法二：

    $(".valid_img").click(function () {
        $(this)[0].src+="?"
    });

方法三：
document.getElementById("valid_img").src+=?

#验证码：
1 pip3 install Pillow
2 文件：check_code.py Monaco.ttf 
3 
intx = parseInt("1") # 字符转换为整型





requests模块使用：
import requests
r1 = requests.get("http://127.0.0.1:8008/login/")
r2=requests.post(url='http://127.0.0.1:8008/login/',
              data={
                  "username":"wxq",
                  'password':"123",
                  'code':'sdf',
              })

print(r2.text)

a speech on biology
For infomation on how to use them.

Django中间件学习
 This document explains all middleware components that come with Django.
 For information on how to use them and how to write your own middleware, see the middleware usage guide.
 Middleware is a framework of hooks into Django’s request/response processing.
 It’s a light, low-level “plugin” system for globally altering Django’s input or output.
 
 
 Django 中间件是一个钩进request/response处理过程的框架，轻量且较为底层的插件系统，全局改变Django输入输出。

Django默认中间件
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
m1.process_exception(self, request, exception):
    print("m1.process_exception1")


m1.process_request
m2.process_request
m1.process_view
m2.process_view
views.py
m2.process_exception
m1.process_exception
m2.process_response
m1.process_response

process_request  process_view process_exception process_response
process_request  process_view process_exception process_response
process_request  process_view process_exception process_response
process_request  process_view process_exception process_response


 信号：
 http://www.cnblogs.com/wupeiqi/articles/5246483.html
 内置信号自动触发
 自定义信号手动触发
 
 div里面嵌套div时,记得div是块级标签，需要设float
 字体的哪种字体用font-family: 微软雅黑
 awesome图标是基于字体来玩的，所以不会放大缩小而失真，我们需要对这样的图标设置样式时，放大放小用font-size, 颜色用color: red
 
 a 标签内联的，自己是多少就是多少，设高宽是没用的。
 样式时a.item，中间没有空格，表示class为item的a标签。
 
 div里面有img标签时
 <div style="height:20px;width:20px;overflow: hidden">   # 这里表示只有20px,  超过就隐藏,如果按下面的百分比设置后，是没有必要设overflow的
     <img style="height: 100%;width: 100%;border-radius:50%" src="test.png"/>  #自适应外标签大小，按百分比缩放，并圆形显示.
 </div>
 
 
form类验证过的数据form.cleaned_data格式为字典，可以直接用于filter
user=models.UserInfo.objects.filter(**form.cleaned_data).first()

表单直接提交的数据request.POST格式为QueryDict，不能直接用于orm的create()方法，需要.dict()转为字典格式，并且字段个数刚好符合才能成功创建
如果有如下input
        <input type="radio" name="gender" value="男" checked="checked">男
        <input type="radio" name="gender" value="女">女
        <input type="checkbox" name="hobby" value="11">篮球
        <input type="checkbox" name="hobby" value="22">足球
QueryDict例子：
csrfmiddlewaretoken': ['XqN6uWZfIwfk2xcOkPgYioSokUTdxTYkw6IsIMuX0qUyf0KnRfOgcH2PBgwFXcoY'], 'gender': ['女'], 'hobby': ['11', '22']}>


user=models.UserInfo.objects.create(**request.POST.dict())
aggregate()是QuerySet的终止子句.

1 当前端select多选提交数据[1,2,3]时，获取数据用request.POST.getlist("author_id_list"),request.POST.get只能获得字符串，无法获取例表
如<QueryDict: { 'title': ['98'], 'pubdate': ['2017-12-15'], 'price': ['7'], 'pub': ['1'], 'author_id_list': ['1', '3']}>


{{ form.username.label }} {{ form.username }} {{ form.username.errors.0 }}
{{ form.password.label }} {{ form.password }} {{ form.password.errors.0 }}

form: label="用户名"

自定义错误信息加入form.errors
form.add_error('password', '用户名或密码错误')  # password为form字段

#md5 密码加密
#password=form.cleaned_data['password']
from utils import md5
form.cleaned_data['password']=md5(form.cleaned_data['password'])
s16/utils/md.py
import hashlib
def md5(text):
    m = hashlib.md5()
    m.update(text.encode('utf-8'))
    return m.hexdigest()

if __name__ == '__main__':
    text='123'
    return md5(text)


pycharm默认以UTF-8存数据到硬盘(unicode to UTF-8)
python3默认以UTF-8读数据到内存（UTF-8 to unicode）
#coding:utf-8 也是指明了用什么编码读数据到内存
with open("test.txt",'r',encoding='utf8') as f:   #虽然文件是UTF8存的，此时要以utf8读, utf8 to unicode
    f.read()             
bytes只接受ASCII码，其它类型都要经过编码为ascii, ascii一律解码为其它类型
bytes  --> decode() --> 其它
其它  ---> encode() -->  ascii







